{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAc,SAAS,aAAa,CAAC,UACrC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAY,SAAS,aAAa,CAAC,SACrC,EAAQ,EAGN,EAAQ,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,SAAS,IACP,GAAK,KAIL,IAAM,EAAI,KAAK,KAAK,CAAC,AAdV,EAcU,KAAK,MAAM,IAC1B,EAAI,KAAK,KAAK,CAAC,AAdP,EAcO,KAAK,MAAM,GAE5B,AAAgB,CAAA,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,EACb,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,EACxC,KAEA,IAEJ,CAEA,SAAS,IACP,IAAK,IAAI,EAAI,EAAG,EA1BL,EA0Be,IACxB,IAAK,IAAI,EAAI,EAAG,EA1BJ,EA0BiB,IAC3B,GAAI,AAAgB,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,CACb,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,CAgDA,SAAS,IACP,IAAK,IAAI,EAAI,EAAG,EApFL,EAoFe,IACxB,IAAK,IAAI,EAAI,EAAG,EApFJ,EAoFiB,IAAK,CAChC,IAAM,EAAO,EAAU,QAAQ,CAAC,EAAE,C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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar startButton = document.querySelector(\".start\");\nvar messageStart = document.querySelector(\".message-start\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar messageWin = document.querySelector(\".message-win\");\nvar gameScore = document.querySelector(\".game-score\");\nvar gameField = document.querySelector(\"tbody\");\nvar score = 0;\nvar rows = 4;\nvar columns = 4;\nvar board = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nfunction getRandomCell() {\n    if (!hasEmptyCell()) return;\n    var r = Math.floor(Math.random() * rows);\n    var c = Math.floor(Math.random() * columns);\n    if (board[r][c] === 0) {\n        board[r][c] = Math.random() < 0.9 ? 2 : 4;\n        updateGame();\n    } else getRandomCell();\n}\nfunction hasEmptyCell() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (board[r][c] === 0) return true;\n    }\n    return false;\n}\nfunction winGame() {\n    for(var r = 0; r < rows; r++){\n        for(var c = 0; c < columns; c++)if (board[r][c] === 2048) messageWin.classList.remove(\"hidden\");\n    }\n}\nfunction loseGame() {\n    if (hasEmptyCell()) return;\n    for(var r = 0; r < rows - 1; r++)for(var c = 0; c < columns - 1; c++){\n        if (board[r][c] === board[r][c + 1] || board[r][c] === board[r + 1][c]) return;\n    }\n    messageLose.classList.remove(\"hidden\");\n}\nfunction resetBoard(table) {\n    return table.forEach(function(el) {\n        return el.splice(0, columns, 0, 0, 0, 0);\n    });\n}\nstartButton.addEventListener(\"click\", function() {\n    startButton.classList.remove(\"start\");\n    startButton.classList.add(\"restart\");\n    startButton.textContent = \"Restart\";\n    messageStart.classList.add(\"hidden\");\n    messageLose.classList.add(\"hidden\");\n    messageWin.classList.add(\"hidden\");\n    score = 0;\n    gameScore.textContent = score;\n    resetBoard(board);\n    getRandomCell();\n    getRandomCell();\n});\nfunction updateGame() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        var cell = gameField.children[r].children[c];\n        var num = board[r][c];\n        cell.textContent = \"\";\n        cell.classList.value = \"\";\n        cell.classList.add(\"field-cell\");\n        if (num > 0) {\n            cell.classList.add(\"field-cell--\".concat(num));\n            cell.textContent = num;\n        }\n    }\n}\ndocument.addEventListener(\"keydown\", function(ev) {\n    switch(ev.key){\n        case \"ArrowLeft\":\n            moveLeft();\n            break;\n        case \"ArrowRight\":\n            moveRight();\n            break;\n        case \"ArrowUp\":\n            moveUp();\n            break;\n        case \"ArrowDown\":\n            moveDown();\n            break;\n    }\n    gameScore.textContent = score;\n    loseGame();\n    winGame();\n    getRandomCell();\n});\nfunction slide(row) {\n    var newRow = row.filter(function(el) {\n        return el !== 0;\n    });\n    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        score += newRow[i];\n    }\n    newRow = newRow.filter(function(el) {\n        return el !== 0;\n    });\n    while(newRow.length < rows)newRow.push(0);\n    return newRow;\n}\nfunction moveLeft() {\n    for(var r = 0; r < rows; r++){\n        var row = board[r];\n        var newRow = slide(row);\n        board[r] = newRow;\n        updateGame();\n    }\n}\nfunction moveRight() {\n    for(var r = 0; r < rows; r++){\n        var row = board[r];\n        var newRow = slide(_to_consumable_array(row).reverse());\n        board[r] = newRow.reverse();\n        updateGame();\n    }\n}\nfunction moveUp() {\n    for(var c = 0; c < columns; c++){\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        var newRow = slide(row);\n        board[0][c] = newRow[0];\n        board[1][c] = newRow[1];\n        board[2][c] = newRow[2];\n        board[3][c] = newRow[3];\n        updateGame();\n    }\n}\nfunction moveDown() {\n    for(var c = 0; c < columns; c++){\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        var newRow = slide(_to_consumable_array(row).reverse());\n        newRow.reverse();\n        board[0][c] = newRow[0];\n        board[1][c] = newRow[1];\n        board[2][c] = newRow[2];\n        board[3][c] = newRow[3];\n        updateGame();\n    }\n}\n\n//# sourceMappingURL=index.ee1b44f1.js.map\n","'use strict';\n\nconst startButton = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\nconst gameField = document.querySelector('tbody');\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction getRandomCell() {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  const r = Math.floor(Math.random() * rows);\n  const c = Math.floor(Math.random() * columns);\n\n  if (board[r][c] === 0) {\n    board[r][c] = Math.random() < 0.9 ? 2 : 4;\n    updateGame();\n  } else {\n    getRandomCell();\n  }\n}\n\nfunction hasEmptyCell() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction winGame() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 2048) {\n        messageWin.classList.remove('hidden');\n      }\n    }\n  }\n}\n\nfunction loseGame() {\n  if (hasEmptyCell()) {\n    return;\n  }\n\n  for (let r = 0; r < rows - 1; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if (board[r][c] === board[r][c + 1] || board[r][c] === board[r + 1][c]) {\n        return;\n      }\n    }\n  }\n\n  messageLose.classList.remove('hidden');\n}\n\nfunction resetBoard(table) {\n  return table.forEach(el => el.splice(0, columns, 0, 0, 0, 0));\n}\n\nstartButton.addEventListener('click', () => {\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  startButton.textContent = 'Restart';\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  score = 0;\n  gameScore.textContent = score;\n\n  resetBoard(board);\n\n  getRandomCell();\n  getRandomCell();\n});\n\nfunction updateGame() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const cell = gameField.children[r].children[c];\n      const num = board[r][c];\n\n      cell.textContent = '';\n      cell.classList.value = '';\n      cell.classList.add('field-cell');\n\n      if (num > 0) {\n        cell.classList.add(`field-cell--${num}`);\n        cell.textContent = num;\n      }\n    }\n  }\n}\n\ndocument.addEventListener('keydown', ev => {\n  switch (ev.key) {\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n  }\n\n  gameScore.textContent = score;\n\n  loseGame();\n  winGame();\n  getRandomCell();\n});\n\nfunction slide(row) {\n  let newRow = row.filter(el => el !== 0);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n\n  newRow = newRow.filter(el => el !== 0);\n\n  while (newRow.length < rows) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction moveLeft() {\n  for (let r = 0; r < rows; r++) {\n    const row = board[r];\n\n    const newRow = slide(row);\n\n    board[r] = newRow;\n\n    updateGame();\n  }\n}\n\nfunction moveRight() {\n  for (let r = 0; r < rows; r++) {\n    const row = board[r];\n\n    const newRow = slide([...row].reverse());\n\n    board[r] = newRow.reverse();\n\n    updateGame();\n  }\n}\n\nfunction moveUp() {\n  for (let c = 0; c < columns; c++) {\n    const row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    const newRow = slide(row);\n\n    board[0][c] = newRow[0];\n    board[1][c] = newRow[1];\n    board[2][c] = newRow[2];\n    board[3][c] = newRow[3];\n\n    updateGame();\n  }\n}\n\nfunction moveDown() {\n  for (let c = 0; c < columns; c++) {\n    const row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    const newRow = slide([...row].reverse());\n\n    newRow.reverse();\n\n    board[0][c] = newRow[0];\n    board[1][c] = newRow[1];\n    board[2][c] = newRow[2];\n    board[3][c] = newRow[3];\n\n    updateGame();\n  }\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","startButton","document","querySelector","messageStart","messageLose","messageWin","gameScore","gameField","score","board","getRandomCell","hasEmptyCell","r","Math","floor","random","c","updateGame","cell","children","num","textContent","classList","value","add","concat","slide","row","newRow","filter","el","push","addEventListener","remove","table","forEach","splice","ev","key","moveLeft","moveRight","reverse","moveUp","moveDown","loseGame","rows","columns","winGame"],"version":3,"file":"index.ee1b44f1.js.map"}